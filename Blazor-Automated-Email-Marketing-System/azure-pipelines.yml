trigger:
  branches:
    include:
      - main

schedules:
  - cron: '0 */4 * * *'
    displayName: 'Check for new Docker image'
    branches:
      include:
        - main
    always: true

jobs:
  - job: CheckForNewDockerImage
    displayName: 'Check for new Docker image'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: PowerShell@2
        displayName: 'Check Docker Hub for new image'
        inputs:
          targetType: 'inline'
          script: |
            # Set Docker credentials and repository
            $DockerHubLogin = "$(DOCKER_HUB_LOGIN)"
            $DockerHubRepo = "$(DOCKER_HUB_USERNAME)/blazor-automated-email-marketing-system"
            # Log in to Docker Hub
            docker login -u ($DockerHubLogin -split ":")[0] -p ($DockerHubLogin -split ":")[1]
            # Retrieve the latest Docker image
            $LatestImageTag = docker pull $DockerHubRepo | Select-String -Pattern 'Status: Downloaded newer image for' -Quiet
            # Log out from Docker Hub
            docker logout
            # Check if a new image is found
            if (-not $LatestImageTag) {
              Write-Host "No new Docker image found."
              exit 1
            }

  # Job 2: Deploy the new Docker image to production
  - job: DeployToWebApp
    displayName: 'Deploy to Web App'
    steps:
      - task: AzureCLI@2
        displayName: 'Log in to Azure'
        inputs:
          azureSubscription: 'My Azure Subscription'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Bash script to log in to Azure using Azure CLI
      
      - task: Docker@2
        displayName: 'Build and push Docker image'
        inputs:
          containerRegistry: 'myacr'
          repository: 'BlazorAutomatedEmailMarketingSystem'
          command: 'buildAndPush'
          Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
          tags: 'latest'
      
      - task: AzureCLI@2
        displayName: 'Create Web App for Containers'
        inputs:
          azureSubscription: 'My Azure Subscription'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            # Bash script to create a web app for containers in Azure using Azure CLI
      
      - script: |
          # Bash script to perform a smoke test by sending a request to the home page of the app and checking the response status code
          response=$(curl --write-out %{http_code} --silent --output /dev/null http://your-app-url)
          if [ $response -eq 200 ]; then
            echo "Smoke test passed. Home page returned HTTP 200."
          else
            echo "Smoke test failed. Home page did not return HTTP 200."
            exit 1
          fi
        displayName: 'Smoke Test'
        
      - script: |
          # Bash script to perform a health check by sending a request to the /health endpoint of the app and checking the response status code
          response=$(curl --write-out %{http_code} --silent --output /dev/null http://my-live-app-url/health)
          if [ $response -eq 200 ]; then
            echo "Health check passed. /health endpoint returned HTTP 200."
          else
            echo "Health check failed. /health endpoint did not return HTTP 200."
            exit 1
          fi
        displayName: 'Health Check'
