@page "/"
@using Blazor_Automated_Email_Marketing_System.Services
@using Newtonsoft.Json.Linq
@using Blazor_Automated_Email_Marketing_System.Models
@using Newtonsoft.Json

@inject DataService DataService

<h1>Automated Email Marketing System</h1>

<h2>App Purpose</h2>

<p>The Blazor Automated Email Marketing System app serves as a secondary component to the primary focus of this project which is CI/CD research using GitHub Actions and Azure DevOps.</p>

<p>To effectively explore the CI/CD pipelines using GitHub Actions and Azure DevOps three prominent email marketing features were selected and implemented with basic functionality: Personalisation, Segmentation and A/B Testing. Mimicking agile sprint releases for these three features allowed for a practical demonstration of the CI/CD pipelines, facilitating the primary investigation into the CI/CD capabilities and behaviours of GitHub Actions and Azure DevOps. Although the app addressed only three of the ten identified requirements for a successful automated email marketing system, this was sufficient to facilitate and support the necessary CI/CD exploration.</p>

<p>The app used ASP.NET and C# code to implement a data model consisting of five simple classes: Subscriber, Tag, Segment, Campaign and EmailMessage. The app has sample data in JSON format to populate each field of each class fully and correctly. This ensures that the model can effectively implement the three key features - Personalisation, Segmentation and A/B Testing.</p>

<h3>Sample Data</h3>

<li>The code in this page injects a DataService to interact with the back-end SQLLite database.</li>
<li>
    On initialization, it checks if the database is already populated with sample data by checking if the lists of subscribers, campaigns, tags, segments, and email messages are empty.
    If the database is empty, it reads sample data from a JSON file located at "wwwroot/sampledata/sampledata.json".
</li>
<li>The code parses the JSON data into separate lists for subscribers, campaigns, tags, segments, and email messages.</li>
<li>It deserialises the JSON data into objects of the corresponding data model types: Subscriber, Campaign, Tag, Segment and EmailMessage.</li>
<li>The code then inserts the deserialised objects into the database, checking for existing records with the same email, name, or subject to avoid duplicates.</li>

<h3>Email Marketing System Requirements</h3>
<p>
    1.Email Campaign Automation<br/>
    <strong>2. Personalization</strong><br/>
    <strong>3. Segmentation</strong><br/>
    4. Analytics<br/>
    5. Mobile Friendliness<br/>
    6. Dynamic Content<br/>
    7. Integrations<br/>
    <strong>8. A/B Testing</strong><br/>
    9. Integrated Drag-and-Drop Email Editor<br/>
</p>

@code {

    protected override async Task OnInitializedAsync()
    {
    // Check if sample data already exists in database
        var allSubscribers = await DataService.GetAllSubscribers();
        var allCampaigns = await DataService.GetAllCampaigns();
        var allTags = await DataService.GetAllTags();
        var allSubscriberSegments = await DataService.GetAllSegments();
        var allEmailMessages = await DataService.GetAllEmailMessages();

        if (allSubscribers.Count == 0 && allCampaigns.Count == 0 && allTags.Count == 0 &&
            allSubscriberSegments.Count == 0 && allEmailMessages.Count == 0)
        {
    // Load sample data from JSON file
            var jsonData = await File.ReadAllTextAsync("wwwroot/sampledata/sampledata.json");
            var jObject = JObject.Parse(jsonData);

    // Parse JSON data
            var subscribersJson = jObject["Subscribers"]?.ToString() ?? throw new ArgumentException("Subscribers JSON is null or empty");
            var campaignsJson = jObject["Campaigns"]?.ToString() ?? throw new ArgumentException("Campaigns JSON is null or empty");
            var tagsJson = jObject["Tags"]?.ToString() ?? throw new ArgumentException("Tags JSON is null or empty");
            var segmentsJson = jObject["Segments"]?.ToString() ?? throw new ArgumentException("Segments JSON is null or empty");
            var emailMessagesJson = jObject["EmailMessages"]?.ToString() ?? throw new ArgumentException("EmailMessages JSON is null or empty");

    // Deserialize JSON data
            var subscribers = JsonConvert.DeserializeObject<List<Subscriber>>(subscribersJson);
            var campaigns = JsonConvert.DeserializeObject<List<Campaign>>(campaignsJson);
            var tags = JsonConvert.DeserializeObject<List<Tag>>(tagsJson);
            var segments = JsonConvert.DeserializeObject<List<Segment>>(segmentsJson);
            var emailMessages = JsonConvert.DeserializeObject<List<EmailMessage>>(emailMessagesJson);

    // Insert sample data into database if it doesn't already exist
            if (subscribers != null)
            {
                foreach (var subscriber in subscribers)
                {
                    var existingSubscriber = await DataService.GetSubscriberByEmail(subscriber.EmailAddress);
                    if (existingSubscriber == null)
                    {
                        await DataService.CreateSubscriber(subscriber);
                    }
                }
            }

            if (campaigns != null)
            {
                foreach (var campaign in campaigns)
                {
                    var existingCampaign = await DataService.GetCampaignByName(campaign.Name);
                    if (existingCampaign == null)
                    {
                        await DataService.CreateCampaign(campaign);
                    }
                }
            }

            if (tags != null)
            {
                foreach (var tag in tags)
                {
                    var existingTag = await DataService.GetTagByName(tag.Name);
                    if (existingTag == null)
                    {
                        await DataService.CreateTag(tag);
                    }
                }
            }

            if (segments != null)
            {
                foreach (var segment in segments)
                {
                    var existingSegment = await DataService.GetSegmentByName(segment.Name);
                    if (existingSegment == null)
                    {
                        await DataService.CreateSubscriberSegment(segment);
                    }
                }
            }

            if (emailMessages != null)
            {
                foreach (var message in emailMessages)
                {
                    var existingMessage = await DataService.GetEmailMessageBySubject(message.Subject);
                    if (existingMessage == null)
                    {
                        await DataService.CreateEmailMessage(message);
                    }
                }
            }
        }
    }

}