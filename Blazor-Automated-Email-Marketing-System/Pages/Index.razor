@page "/"
@using Newtonsoft.Json.Linq
@using Blazor_Automated_Email_Marketing_System.Models
@using Newtonsoft.Json
@using Blazor_Automated_Email_Marketing_System.Services

@inject DataService DataService

@code {
    protected override async Task OnInitializedAsync()
    {
        // Check if sample data already exists in database
        var allSubscribers = await DataService.GetAllSubscribers();
        var allCampaigns = await DataService.GetAllCampaigns();
        var allTags = await DataService.GetAllTags();
        var allSubscriberSegments = await DataService.GetAllSubscriberSegments();
        var allEmailMessages = await DataService.GetAllEmailMessages();

        if (allSubscribers.Count == 0 && allCampaigns.Count == 0 && allTags.Count == 0 &&
    allSubscriberSegments.Count == 0 && allEmailMessages.Count == 0)
        {
            // Load sample data from JSON file
            var jsonData = await File.ReadAllTextAsync("wwwroot/sampledata/sampledata.json");
            var jObject = JObject.Parse(jsonData);

            // Parse JSON data
            var subscribersJson = jObject["Subscribers"]?.ToString() ?? throw new ArgumentException("Subscribers JSON is null or empty");
            var campaignsJson = jObject["Campaigns"]?.ToString() ?? throw new ArgumentException("Campaigns JSON is null or empty");
            var tagsJson = jObject["Tags"]?.ToString() ?? throw new ArgumentException("Tags JSON is null or empty");
            var segmentsJson = jObject["Segments"]?.ToString() ?? throw new ArgumentException("Segments JSON is null or empty");
            var emailMessagesJson = jObject["EmailMessages"]?.ToString() ?? throw new ArgumentException("EmailMessages JSON is null or empty");

            // Deserialize JSON data
            var subscribers = JsonConvert.DeserializeObject<List<Subscriber>>(subscribersJson);
            var campaigns = JsonConvert.DeserializeObject<List<Campaign>>(campaignsJson);
            var tags = JsonConvert.DeserializeObject<List<Tag>>(tagsJson);
            var segments = JsonConvert.DeserializeObject<List<Segment>>(segmentsJson);
            var emailMessages = JsonConvert.DeserializeObject<List<EmailMessage>>(emailMessagesJson);

            // Insert sample data into database if it doesn't already exist
            if (subscribers != null)
            {
                foreach (var subscriber in subscribers)
                {
                    var existingSubscriber = await DataService.GetSubscriberByEmail(subscriber.Email);
                    if (existingSubscriber == null)
                    {
                        await DataService.CreateSubscriber(subscriber);
                    }
                }
            }

            if (campaigns != null)
            {
                foreach (var campaign in campaigns)
                {
                    var existingCampaign = await DataService.GetCampaignByName(campaign.Name);
                    if (existingCampaign == null)
                    {
                        await DataService.CreateCampaign(campaign);
                    }
                }
            }

            if (tags != null)
            {
                foreach (var tag in tags)
                {
                    var existingTag = await DataService.GetTagByName(tag.Name);
                    if (existingTag == null)
                    {
                        await DataService.CreateTag(tag);
                    }
                }
            }

            if (segments != null)
            {
                foreach (var segment in segments)
                {
                    var existingSegment = await DataService.GetSegmentByName(segment.Name);
                    if (existingSegment == null)
                    {
                        await DataService.CreateSubscriberSegment(segment);
                    }
                }
            }

            if (emailMessages != null)
            {
                foreach (var message in emailMessages)
                {
                    var existingMessage = await DataService.GetEmailMessageBySubject(message.Subject);
                    if (existingMessage == null)
                    {
                        await DataService.CreateEmailMessage(message);
                    }
                }
            }
        }
    }

}