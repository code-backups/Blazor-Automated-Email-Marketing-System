trigger:
  branches:
    include:
      - main

schedules:
  - cron: '0 */4 * * *'
    displayName: 'Check for new Docker image'
    branches:
      include:
        - main
    always: true

jobs:

  - job: LoginAndPullNewImage
    displayName: 'Check for new Docker image'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: PowerShell@2
        displayName: 'Check Dockerhub for new image'
        inputs:
          targetType: 'inline'
          script: |
            $DockerHubRepo = "$(DOCKER_HUB_USERNAME)/blazor-automated-email-marketing-system"
            docker login -u $(DOCKER_HUB_USERNAME) -p $(DOCKER_HUB_PASSWORD)
            docker pull $DockerHubRepo
            # TODO check if pulled image ends with :v1.0.0 if not, echo a warning, logout of docker and exit the pipeline

  - job: ConvertAndRebuildImage
    displayName: 'Convert Image and Rebuild'
    dependsOn: LoginAndPullNewImage
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: |
          - script: |
              # Build a completely new Docker image from the pulled Docker image
              docker build -t $(DOCKER_HUB_USERNAME)/blazor-automated-email-marketing-system-new:live .
        displayName: 'Convert and Rebuild'

  - job: TestImage
    displayName: 'Test Docker Image'
    dependsOn: ConvertAndRebuildImage
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: |
          - script: |
          # Check if the new Docker image is a valid Docker image - simple Deployment test
          if docker inspect $(DOCKER_HUB_USERNAME)/blazor-automated-email-marketing-system:latest &> /dev/null; then
            echo "Docker image test passed. Image is valid."
          else
            echo "Docker image test failed. Image is invalid."
            docker logout
            exit 1
          fi
        displayName: 'Docker Image Test'

  - job: PushImage
    displayName: 'Push Docker Image'
    dependsOn: TestImage
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Docker@2
        displayName: 'Push Docker Image'
        inputs:
          command: 'push'
          containerRegistry: 'DOCKER_HUB_LOGIN'
          repository: '$(DOCKER_HUB_REPO)'
          tags: 'live'

  - job: Logout
    displayName: 'Logout from Docker'
    dependsOn: PushImage
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Docker@2
        displayName: 'Logout from Docker Hub'
        inputs:
          command: 'logout'
          containerRegistry: 'DOCKER_HUB_LOGIN'
